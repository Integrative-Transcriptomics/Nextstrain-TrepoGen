#!/usr/bin/env python3
"""Reprocess Auspice JSON files during the Nextstrain-TrepoGen gene workflow.

Description:
	This script reprocesses Auspice JSON files generated by the Nextstrain-TrepoGen
	gene workflow. It updates the "color" field of genome annotations in the metadata
	based on a predefined color map, and writes the modified JSON data to a specified
	output file. If a corresponding root sequence file exists for the input, it is
	also copied to match the output file's naming.

Usage:
	python reprocess_auspice.py -i <input_configuration.json> -o <output_configuration.json>
"""
import json
import argparse
from shutil import copyfile
from os import path

"""Fixed color map for genome annotations in Auspice JSON files; based on the managua color map (https://www.fabiocrameri.ch/colourmaps/)."""
color_map = {
	"Signal-peptide": "#74c4ea",
	"Hatch": "#68a3d5",
	"Intracellular-loop": "#5d85c0",
	"Transmembrane-helix": "#893e3a",
	"Beta-strand": "#4d4c88",
	"Extracellular-loop": "#e9ac5b"
}

def parse_args():
	"""Parses command-line arguments for reprocessing Auspice JSON files.

	Description:
		Parses command-line arguments to obtain the input and output file paths for
		reprocessing Auspice JSON files. The input file is expected to be a JSON file
		generated by the Nextstrain-TrepoGen gene workflow, and the output file will
		contain the modified JSON data with updated genome annotation colors. The
		output file will also be used to copy a corresponding root sequence file, if
		it exists.

	Arguments:
		-i, --input (required): Path to the input Auspice JSON configuration file.
		-o, --output (required): Path to the output merged file.

	Returns:
		argparse.Namespace: Parsed command-line arguments with the following attributes:
		- input (str): Path to the input file (required).
		- output (str): Path to the output file (required).
	"""
	parser = argparse.ArgumentParser(
		description="Reprocess Auspice JSON files.",
	)
	parser.add_argument("-i", "--input", type=str, required=True, help="Path to a Auspice JSON configuration file.")
	parser.add_argument("-o", "--output", type=str, required=True, help="Path to the output Auspice JSON file.")
	return parser.parse_args()

def main():
	"""Reprocess Auspice JSON files.

	Description:
		Reprocesses Auspice JSON files generated by the Nextstrain-TrepoGen gene workflow.
		It updates the "color" field of genome annotations in the metadata based on a predefined
		color map, and writes the modified JSON data to a specified output file. If a
		corresponding root sequence file exists for the input, it is also copied to match the
		output file's naming.

	Arguments:
		None. Arguments are parsed internally via `parse_args()`.

	Returns:
		None.

	Side Effects:
		- Writes the modified Auspice JSON data to the output file specified in the CLI arguments.
		- Copies the corresponding root sequence file if it exists, matching the output file's naming.
	"""
	args = parse_args()

	global color_map

	auspice = {}
	with open(args.input, 'r') as i:
		auspice = json.load(i)

	if "genome_annotations" in auspice["meta"]:
		for annotation in auspice["meta"]["genome_annotations"].keys():
			for color_key, color_value in color_map.items():
				if annotation.startswith(color_key):
					auspice["meta"]["genome_annotations"][annotation]["color"] = color_value
					break

	with open(args.output, 'w+') as o:
		json.dump(auspice, o, indent=2)

	root_sequence_file = f"{args.input}".removesuffix('.json') + '_root-sequence.json'
	if path.exists( root_sequence_file ):
		copyfile(root_sequence_file, f"{args.output}".removesuffix('.json') + '_root-sequence.json')

if __name__ == '__main__':
	main()
